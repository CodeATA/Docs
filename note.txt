shadow memory:
    TaintTrace
    LIFT
    Valgrind
    Dr. Memory
    Umbra
    BoundLess
    LBC

instrumentation——分为binary和compile两类

debug allocator

使用shadow memory的话就意味着每次访存都要变成至少两次访存，这对cache有什么影响？

指针检查在硬件实现上需要考虑的三个设计维度：
1.隐式检查还是显式检查？
隐式检查利用插入微操作来检查，显式检查则是在编译时插入指令，隐式检查的一个劣势是无法应用静态的编译优化（存疑，是否有必要在这里用编译优化？）
2.如何分辨指针？
HardBound没有专门区分指针，所有的访存都需要检查元数据（HardBound没有检查时间错误），通过利用指针cache来降低开销；Watchdog用启发式的方法过滤；加入指令扩展的话编译器可以更准确地区分指针类型
3.如何组织内存中的元数据？
fat pointer在进行类型转换的时候会出问题？——应该是会有问题，但是这是不是由于编程时进行了不当的类型转换导致？这种情况和通常意义上的攻击是否应该归于同一类？例如一个char指针被强制转化为int指针，这样的代码是否要假设其存在？

时间错误的检查可以有：lock-and-key，检查shadow memory中的lock与指针的key是否相同；bound invalidation，free一块区域的时候找到所有有关的指针并修改其元数据，需要CAM来支持；不完善的减少时间错误可能性的手段，例如用一个队列延迟释放的空间被再利用的时间，这个方案能不能做改善？比如在缓冲区域总空间大小不变的情况下，将缓冲区域划分为两部分交替使用？
时间错误另一个需要探讨的问题是，为了利用时间错误发起一次成功的攻击，是否要依赖于空间错误来进行铺垫？如果这个假设成立的话那么所有的时间错误可以归于空间错误——double free式的时间错误攻击是要依赖于空间错误来进行内存链表伪造的，但是use-after-free式的攻击要如何完成？有没有成功的use-after-free攻击案例？

如何减少不必要的检查？例如register spill

功能验证：
NIST Juliet Test Suite for C/C++ [32], SAFE Code test suite, and Wilander test suite [45]. These include more than 2000 test cases exercising various kinds of buffer overflows. To evaluate the effectiveness with use-after-free vulnerabilities, we ran 291 test cases for use-after-free vulnerabilities (CWE-416 and CWE-562) from the NIST Juliet Test Suite for C/C++ [32], which are modeled after various use-after-free errors reported in the wild.

SoftBound这篇里有形式化验证空间错误检查完备性的内容

方案在兼容性方面的表现：是否需要重新编译，是否需要重写代码（源代码兼容性），是否能够链接旧有的库（二进制兼容性），是否能够各模块独立编译（取决于是否需要进行全局的规划）
几乎所有的方案都会涉及到重新编译
将指针改为结构体的方案会涉及重写代码--这是一定的吗？但是一定会影响内存分布情况，而且很可能不能链接现有库代码
low fat pointer这种inline形式的元数据不会使指针本身影响内存分布，但是其进行验证建立在内存结构的一些假设上，所以也有不兼容旧有库的情况

**兼容旧有库的充要条件是什么？**
**代码不需要重写的充要条件是什么？**

关于fat pointers，最初提出low fat pointers的论文（文件名p721-kwon.pdf），提到了要让fat pointers能够胜任object capabilities的目标，为什么要定这个目标？object capability有效吗？有多大效果？需要用low fat pointer来实现吗？low fat pointer需要考虑将这个作为目标吗？（是为了保证unforgeable和non-bypassable？）

low fat pointers的基本假设是64位系统中不会把全部的64位用于地址编码，存在未使用的位数

在内存容量扩大的大前提下，memory overhead需不需要关心？超过多少需要关心？内存碎片需不需要关心？